#include <iostream>



using namespace std;

//----------------------------------------------------------------------------------------

// 재귀함수를 이용한 연결리스트 삭제함수 작성

typedef struct Node
{
    int data;
    struct Node* Next;


}    Node;
   

void DeleteAll(Node* node)
{
    if (node->Next != nullptr)
    {
        DeleteAll(node->Next);
    }

    delete node->Next;

}
// 

//----------------------------------------------------------------------------------------

// 코드를 보고 Setter Getter를 사용함으로써 얻을 수 있는 이점을 객체지향의 특성을 바탕으로 설명

class monster
{
public:
    monster(const string name); //생성자 name
    void SetHealthPoint(int HealtPoint);    //mHealthPoint = HealthPoint;

private:
    string mName;
    int mHealthPoint;
    int mMaxHealthPoint;
};

//검색

// Setter : 해당객체의 값을 설정 ex) SetHealthPoint(int); /  Getter : 해당객체의 값을 반환 ex) Monster::GetName();
// 
//캡슐화 설명
//
//----------------------------------------------------------------------------------------

// 문자열을 뒤집는 함수인 void Reverse string(char* str)를 작성하시오

void Reversestring(char* str)
{
    int len = strlen(str);
    char* Tempstr = new char[len];

    for (int i = 0; i < len; i++)
    {
        Tempstr[i] = str[len - i -1]; 
    }
    
    str = Tempstr;

   
}

// 명시적 캐스팅과 암시적 캐스팅에 대해 아는데로 설명하고 C++에는 어떤 캐스팅이 있는지 대략적으로 설명하시오

// 명시적캐스팅 :  int a, float b 일때 a = (int)b 등 코드로 자료형을 직접적으로 변환하는 과정
// 암시적캐스팅 : a = b; 명시적으로 변환하지않고 컴파일러에 맡기는 캐스팅
//static_cast , dynamic_cast


//----------------------------------------------------------------------------------------

// C++클래스를 만들 때 컴파일러가 자동으로 만들어주는 함수들이 어떤게 있는지 설명하고 어떤 상황에서 컴파일러가 만들어주는 함수가 위험할지 설명하시오


//검색

// 생성자, 복사 생성자, 복사 대입연산자('=' 연산자 오버라이딩), 소멸자
// 얕은복사 깊은복사
// 
//----------------------------------------------------------------------------------------

// 부모클래스 A로부터 상속된 B,C,D가 있을 때, A의 소멸자에 virtual키워드를 왜 붙여야하는지 설명하시오.


//검색

// A - B - C 상속구조  = 생성자 호출순서 A -> B -> C / 소멸자 호출 순서 C -> B -> A 
// 가상함수로 정의되지 않은 자식클래스의 함수를 호출하면 부모클래스의 멤버함수가 호출된다
// C의 소멸자를 호출하여도 소멸자가 virtual이 아니라면 C의 소멸자가 아닌 A의 소멸자가 호출되어서 B와 C 객체를 가리키는 포인터가 소멸되지않는다
// 이미 해제된 메모리를 가리키는 댕글링포인터 발생

//----------------------------------------------------------------------------------------










//검색
//캡슐화 : 객체의 구조와 정보를 하나의 캡슐처럼 감싸 외부에서 볼 수 없게 은닉하여 보호

//상속 : 자식클래스가 부모클래스의 속성을 물려받는것

//다형성 : 하나의 객체나 메소드가 다른 형태를 가질 수 있는것
//오버라이딩 : 부모클래스 함수를 자식클래스에서 재정의하여 사용하는것
//오버로딩 : 매개변수 타입이나 개수를 달리하여 중복정의함으로써 매개변수에 따라 다른 함수가 호출되는것